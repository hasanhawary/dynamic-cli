<?php

namespace App\Policies\{{group}};

use App\Models\{{model}};
use Illuminate\Auth\Access\HandlesAuthorization;

class {{model}}Policy
{
    use HandlesAuthorization;

    /**
     * @param User ${{modelSnake}}
     * @param  ?{{model}} ${{modelSnake}}Model
     * @return bool
     */
    public function view(User ${{modelSnake}}, ?{{model}} ${{modelSnake}}Model = null): bool
    {
        return (${{modelSnake}}->can('view-all-{{modelSnake}}') || ${{modelSnake}}->can('view-own-{{modelSnake}}'))
        && (!${{modelSnake}}Model || $this->checkUser(${{modelSnake}}, ${{modelSnake}}Model));
    }

    /**
     * @param User ${{modelSnake}}
     * @param {{model}}|null ${{modelSnake}}Model
     * @return bool
     */
    public function create(User ${{modelSnake}}, ?{{model}} ${{modelSnake}}Model = null): bool
    {
        return ${{modelSnake}}->can('create-{{modelSnake}}') && (!${{modelSnake}}Model || $this->checkUser(${{modelSnake}}, ${{modelSnake}}Model));
    }

    /**
     * @param User ${{modelSnake}}
     * @param {{model}} ${{modelSnake}}Model
     * @return bool
     */
    public function update(User ${{modelSnake}}, {{model}} ${{modelSnake}}Model): bool
    {
        return ${{modelSnake}}->can('update-{{modelSnake}}') && $this->checkUser(${{modelSnake}}, ${{modelSnake}}Model);
    }

    /**
     * @param User ${{modelSnake}}
     * @param {{model}}|null ${{modelSnake}}Model
     * @return bool
     */
    public function delete(User ${{modelSnake}}, ?{{model}} ${{modelSnake}}Model = null): bool
    {
        if (!${{modelSnake}}->can('delete-{{modelSnake}}')) {
            return false;
        }

        return !${{modelSnake}}Model || $this->checkUser(${{modelSnake}}, ${{modelSnake}}Model);
    }

    /**
     * @param User ${{modelSnake}}
     * @param {{model}}|null ${{modelSnake}}Model
     * @return bool
     */
    public function restore(User ${{modelSnake}}, ?User ${{modelSnake}}Model = null): bool
    {
        if (!${{modelSnake}}->can('restore-{{modelSnake}}')) {
            return false;
        }

        return !${{modelSnake}}Model || $this->checkUser(${{modelSnake}}, ${{modelSnake}}Model);
    }

    /**
     * @param User ${{modelSnake}}
     * @param {{model}} ${{modelSnake}}Model
     * @return bool
     */
    public function checkUser(User ${{modelSnake}}, {{model}} ${{modelSnake}}Model): bool
    {
        return ${{modelSnake}}->can('view-all-{{modelSnake}}') || ${{modelSnake}}Model->created_by === ${{modelSnake}}->id;
    }
}
