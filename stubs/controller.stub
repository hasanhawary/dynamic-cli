<?php

namespace App\Http\Controllers\API\{{group}};

use App\Http\Controllers\Controller;
use App\Http\Requests\{{group}}\{{model}}Request;
use App\Http\Requests\Global\Other\PageRequest;
use App\Http\Requests\Global\Other\OrderByFilter;
use App\Http\Resources\{{group}}\{{model}}Resource;
use App\Models\{{model}};
use App\Trait\Global\HasSoftDeleteMethods;
use Illuminate\Http\JsonResponse;
use Illuminate\Pipeline\Pipeline;
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;
use Spatie\Permission\Middleware\PermissionMiddleware;
use function __;

class {{model}}Controller extends Controller implements HasMiddleware
{
    use HasSoftDeleteMethods;

    public function __construct()
    {
        $this->setSoftDeleteModel({{model}}::class);
    }

    public static function middleware(): array
    {
        return [
            new Middleware(PermissionMiddleware::using('read-{{modelSnake}}'), only: ['index', 'show']),
            new Middleware(PermissionMiddleware::using('create-{{modelSnake}}'), only: ['store']),
            new Middleware(PermissionMiddleware::using('update-{{modelSnake}}'), only: ['update']),
        ];
    }

    /**
     * @param PageRequest $request
     * @return JsonResponse
     */
    public function index(PageRequest $request): JsonResponse
    {
        $query = app(Pipeline::class)
            ->send({{model}}::query())
            ->through([OrderByFilter::class])
            ->thenReturn();

        return successResponse(fetchData($query, $request->pageSize, {{model}}Resource::class));
    }

    /**
     * @param {{model}}Request $request
     * @return JsonResponse
     */
    public function store({{model}}Request $request): JsonResponse
    {
        ${{modelSnake}} = {{model}}::create($request->validated());

        return successResponse(new {{model}}Resource(${{modelSnake}}), __('api.created_success'));
    }

    /**
     * @param {{model}} ${{modelSnake}}
     * @return JsonResponse
     */
    public function show({{model}} ${{modelSnake}}): JsonResponse
    {
        return successResponse(new {{model}}Resource(${{modelSnake}}));
    }

    /**
     * @param {{model}}Request $request
     * @param {{model}} ${{modelSnake}}
     * @return JsonResponse
     */
    public function update({{model}}Request $request, {{model}} ${{modelSnake}}): JsonResponse
    {
        ${{modelSnake}}->update($request->validated());

        return successResponse(new {{model}}Resource(${{modelSnake}}->refresh()), __('api.updated_success'));
    }
}
